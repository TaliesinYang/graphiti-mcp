version: '3.8'

services:
  neo4j:
    image: neo4j:5.26.2
    container_name: graphiti-neo4j
    restart: unless-stopped
    ports:
      - "${NEO4J_HTTP_PORT:-7474}:7474"  # HTTP
      - "${NEO4J_BOLT_PORT:-7687}:7687"  # Bolt
    environment:
      - NEO4J_AUTH=${NEO4J_USER:-neo4j}/${NEO4J_PASSWORD:-password123}
      - NEO4J_server_memory_heap_initial__size=${NEO4J_HEAP_INITIAL:-512m}
      - NEO4J_server_memory_heap_max__size=${NEO4J_HEAP_MAX:-1G}
      - NEO4J_server_memory_pagecache_size=${NEO4J_PAGECACHE:-512m}
      - NEO4J_dbms_security_procedures_unrestricted=gds.*
      - NEO4J_dbms_security_procedures_allowlist=gds.*
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - ./backups:/backups
      - /var/run/docker.sock:/var/run/docker.sock:ro
    healthcheck:
      test: ["CMD", "wget", "-O", "/dev/null", "-q", "http://localhost:7474"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s
    labels:
      # Ofelia backup configuration
      - "ofelia.enabled=true"
      - "ofelia.job-exec.neo4j-backup.schedule=${BACKUP_SCHEDULE:-0 0 2,10,20 * * *}"
      - "ofelia.job-exec.neo4j-backup.command=/backups/backup.sh"
      - "ofelia.job-exec.neo4j-backup.no-overlap=true"
      - "ofelia.job-exec.neo4j-cleanup.schedule=0 0 3 * * 0"
      - "ofelia.job-exec.neo4j-cleanup.command=find /backups -name 'backup-*.dump' -mtime +${BACKUP_RETENTION_DAYS:-7} -delete && echo 'Cleaned up old backups'"
    networks:
      - graphiti-network

  graphiti-mcp:
    build: ./mcp-server
    container_name: graphiti-mcp
    restart: unless-stopped
    depends_on:
      neo4j:
        condition: service_healthy
    environment:
      - NEO4J_URI=${NEO4J_URI:-bolt://neo4j:7687}
      - NEO4J_USER=${NEO4J_USER:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-password123}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_BASE_URL=${OPENAI_BASE_URL:-}
      - MODEL_NAME=${MODEL_NAME:-gpt-4o-mini}
      - SMALL_MODEL_NAME=${SMALL_MODEL_NAME:-gpt-4o-mini}
      - LLM_TEMPERATURE=${LLM_TEMPERATURE:-0.1}
      - MCP_GROUP_ID=${MCP_GROUP_ID:-default}
      - SEMAPHORE_LIMIT=${SEMAPHORE_LIMIT:-10}
      # Azure OpenAI support (optional)
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT:-}
      - AZURE_OPENAI_DEPLOYMENT_NAME=${AZURE_OPENAI_DEPLOYMENT_NAME:-}
      - AZURE_OPENAI_API_VERSION=${AZURE_OPENAI_API_VERSION:-}
    ports:
      - "${MCP_HTTP_PORT:-8000}:8000"  # HTTP transport for MCP
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config:ro
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - graphiti-network

  ofelia:
    image: mcuadros/ofelia:latest
    container_name: graphiti-ofelia
    restart: unless-stopped
    depends_on:
      - neo4j
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./logs:/var/log/ofelia
      - ./scripts:/scripts:ro
      - ./backups:/backups
    command: daemon --docker
    environment:
      - TZ=${TIMEZONE:-UTC}
    labels:
      - "ofelia.enabled=true"
      # Self-monitoring job
      - "ofelia.job-local.ofelia-health.schedule=@every 1h"
      - "ofelia.job-local.ofelia-health.command=echo '[$(date)] Ofelia scheduler is running' >> /var/log/ofelia/health.log"
    networks:
      - graphiti-network

  # Optional: Monitoring with Watchtower (updates containers automatically)
  watchtower:
    image: containrrr/watchtower
    container_name: graphiti-watchtower
    restart: unless-stopped
    profiles:
      - monitoring
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_SCHEDULE=0 0 4 * * 0  # Weekly on Sunday at 4am
      - WATCHTOWER_NOTIFICATIONS=slack
      - WATCHTOWER_NOTIFICATION_SLACK_HOOK_URL=${SLACK_WEBHOOK_URL:-}
    networks:
      - graphiti-network

volumes:
  neo4j_data:
    name: graphiti-neo4j-data
    driver: local
  neo4j_logs:
    name: graphiti-neo4j-logs
    driver: local

networks:
  graphiti-network:
    name: graphiti-network
    driver: bridge